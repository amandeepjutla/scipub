vars2=NULL, varNames2=vars2,
method=c("pearson", "spearman"), use=c("pairwise","complete"),roundN=2,
tri=c("upper", "lower","all"), cutempty= c(FALSE,TRUE), colnum= c(FALSE,TRUE)){
# combine vars to start
varsall <- c(vars,vars2)
varNamesall <- c(varNames,varNames2)
# if vars is missing,
if (is.null(varsall)) {
varsall <- names(data)
varNamesall<-varsall
}
# Check varNames
if (length(varNames) != length(vars)) {
stop('length of varNames does not match length of vars',call. = F)
}
if (length(varNames2) != length(vars2)) {
stop('length of varNames2 does not match length of vars2',call. = F)
}
#select data
x <- data %>% dplyr::select(all_of(varsall))
#check for non-numeric and remove with warning...
#x %>% select_if(negate(is.numeric))
#correlate
r <- stats::cor(x, use = use[1], method = method[1])
#get n
n <- t(!is.na(x)) %*% (!is.na(x))
# calc t-stat
t <- (r * sqrt(n - 2))/sqrt(1 - r^2)
# calc p-value
p <- -2 * expm1(pt(abs(t), (n - 2), log.p = TRUE))
p[p > 1] <- 1
# round, format, and add stars
rmat <- matrix(paste(sub(x = format(round(r,roundN),roundN),pattern = "0.",replacement = "."),
ifelse(p<.001,"***",ifelse(p<.01,"**",ifelse(p<.05,"*",""))),sep=""),
nrow = ncol(x),ncol = ncol(x))
# remove diagonal
diag(rmat) <- "-"
# if vars2 supplied - override other...
if (!is.null(vars2)) {
colnum <- FALSE
cutempty <- FALSE
tri <- "all"
}
#rename
if (colnum[1]) {
rownames(rmat) <- paste(1:length(varsall), varNamesall, sep = ". ")
colnames(rmat) <- 1:length(varsall)
} else {
rownames(rmat) <- varNamesall
colnames(rmat) <- varNamesall
}
## pick upper/lower triangle of correlation matrix to keep
if(tri[1]=="upper"){
rmat[lower.tri(rmat, diag = FALSE)] <- ""
if (cutempty[1] & !colnum[1]) {
rmat <- rmat[-ncol(x),]
}
}
if(tri[1]=="lower"){
rmat[upper.tri(rmat, diag = FALSE)] <- ""
if (cutempty[1]) {
rmat <- rmat[,-ncol(x)]
}
}
# if vars2 supplied - cut to cross-correl
if (!is.null(vars2)) {
rmat <- rmat[1:length(vars),(length(vars)+1):length(varsall)]
}
#else{
#  if(result[1]=="html") print(xtable(Rnew), type="html")
#  else print(xtable(Rnew), type="latex")
#}
return(rmat)
}
correltable(data=diamonds)
load("/Users/David/Dropbox (NYSPI)/ABCDdata/Release2.0.1/ABCDstudyNDA/OCD_ABCD_merge.Rda")
data <- ABCD_merge
#vars <- c("Age","Income","CBCL_OCS","Height")
#varNames <- c("Age (months)","Income","CBCL OCS","Height")
vars <- c("Age","Income","Height")
varNames <- c("Age (months)","Income","Height")
vars2 <- c("CBCL_OCS","Height")
varNames2 <- c("CBCL OCS","Height")
use <- "pairwise"
method <- "pearson"
roundN<-2
tri<-"upper"
cutempty <- TRUE
colnum <- TRUE
#add somoething to handle factor as t-test/chi?! temp replace with zero to make cor run?
# LEGEND!
#output formatting#result=c("none", "html", "latex")
correltable <-function(data, vars=NULL, varNames = vars,
vars2=NULL, varNames2=vars2,
method=c("pearson", "spearman"), use=c("pairwise","complete"),roundN=2,
tri=c("upper", "lower","all"), cutempty= c(FALSE,TRUE), colnum= c(FALSE,TRUE)){
# combine vars to start
varsall <- c(vars,vars2)
varNamesall <- c(varNames,varNames2)
# if vars is missing,
if (is.null(varsall)) {
varsall <- names(data)
varNamesall<-varsall
}
# Check varNames
if (length(varNames) != length(vars)) {
stop('length of varNames does not match length of vars',call. = F)
}
if (length(varNames2) != length(vars2)) {
stop('length of varNames2 does not match length of vars2',call. = F)
}
#select data
x <- data %>% dplyr::select(all_of(varsall))
#check for non-numeric and remove with warning...
x %>% select_if(negate(is.numeric))
#correlate
r <- stats::cor(x, use = use[1], method = method[1])
#get n
n <- t(!is.na(x)) %*% (!is.na(x))
# calc t-stat
t <- (r * sqrt(n - 2))/sqrt(1 - r^2)
# calc p-value
p <- -2 * expm1(pt(abs(t), (n - 2), log.p = TRUE))
p[p > 1] <- 1
# round, format, and add stars
rmat <- matrix(paste(sub(x = format(round(r,roundN),roundN),pattern = "0.",replacement = "."),
ifelse(p<.001,"***",ifelse(p<.01,"**",ifelse(p<.05,"*",""))),sep=""),
nrow = ncol(x),ncol = ncol(x))
# remove diagonal
diag(rmat) <- "-"
# if vars2 supplied - override other...
if (!is.null(vars2)) {
colnum <- FALSE
cutempty <- FALSE
tri <- "all"
}
#rename
if (colnum[1]) {
rownames(rmat) <- paste(1:length(varsall), varNamesall, sep = ". ")
colnames(rmat) <- 1:length(varsall)
} else {
rownames(rmat) <- varNamesall
colnames(rmat) <- varNamesall
}
## pick upper/lower triangle of correlation matrix to keep
if(tri[1]=="upper"){
rmat[lower.tri(rmat, diag = FALSE)] <- ""
if (cutempty[1] & !colnum[1]) {
rmat <- rmat[-ncol(x),]
}
}
if(tri[1]=="lower"){
rmat[upper.tri(rmat, diag = FALSE)] <- ""
if (cutempty[1]) {
rmat <- rmat[,-ncol(x)]
}
}
# if vars2 supplied - cut to cross-correl
if (!is.null(vars2)) {
rmat <- rmat[1:length(vars),(length(vars)+1):length(varsall)]
}
#else{
#  if(result[1]=="html") print(xtable(Rnew), type="html")
#  else print(xtable(Rnew), type="latex")
#}
return(rmat)
}
correltable(data=diamonds)
data=diamonds
vars=NULL
varNames = vars
vars2=NULL
# combine vars to start
varsall <- c(vars,vars2)
varNamesall <- c(varNames,varNames2)
# if vars is missing,
if (is.null(varsall)) {
varsall <- names(data)
varNamesall<-varsall
}
# Check varNames
if (length(varNames) != length(vars)) {
stop('length of varNames does not match length of vars',call. = F)
}
if (length(varNames2) != length(vars2)) {
stop('length of varNames2 does not match length of vars2',call. = F)
}
length(varNames)
length(vars)
length(varNames2)
vars2=NULL
varNames2=vars2
if (length(varNames2) != length(vars2)) {
stop('length of varNames2 does not match length of vars2',call. = F)
}
#select data
x <- data %>% dplyr::select(all_of(varsall))
x
correltable <-function(data, vars=NULL, varNames = vars,
vars2=NULL, varNames2=vars2,
method=c("pearson", "spearman"), use=c("pairwise","complete"),roundN=2,
tri=c("upper", "lower","all"), cutempty= c(FALSE,TRUE), colnum= c(FALSE,TRUE)){
# combine vars to start
varsall <- c(vars,vars2)
varNamesall <- c(varNames,varNames2)
# if vars is missing,
if (is.null(varsall)) {
varsall <- names(data)
varNamesall<-varsall
}
# Check varNames
if (length(varNames) != length(vars)) {
stop('length of varNames does not match length of vars',call. = F)
}
if (length(varNames2) != length(vars2)) {
stop('length of varNames2 does not match length of vars2',call. = F)
}
#select data
x <- data %>% dplyr::select(all_of(varsall))
#check for non-numeric and remove with warning...
x <- x %>% select_if(negate(is.numeric))
#correlate
r <- stats::cor(x, use = use[1], method = method[1])
#get n
n <- t(!is.na(x)) %*% (!is.na(x))
# calc t-stat
t <- (r * sqrt(n - 2))/sqrt(1 - r^2)
# calc p-value
p <- -2 * expm1(pt(abs(t), (n - 2), log.p = TRUE))
p[p > 1] <- 1
# round, format, and add stars
rmat <- matrix(paste(sub(x = format(round(r,roundN),roundN),pattern = "0.",replacement = "."),
ifelse(p<.001,"***",ifelse(p<.01,"**",ifelse(p<.05,"*",""))),sep=""),
nrow = ncol(x),ncol = ncol(x))
# remove diagonal
diag(rmat) <- "-"
# if vars2 supplied - override other...
if (!is.null(vars2)) {
colnum <- FALSE
cutempty <- FALSE
tri <- "all"
}
#rename
if (colnum[1]) {
rownames(rmat) <- paste(1:length(varsall), varNamesall, sep = ". ")
colnames(rmat) <- 1:length(varsall)
} else {
rownames(rmat) <- varNamesall
colnames(rmat) <- varNamesall
}
## pick upper/lower triangle of correlation matrix to keep
if(tri[1]=="upper"){
rmat[lower.tri(rmat, diag = FALSE)] <- ""
if (cutempty[1] & !colnum[1]) {
rmat <- rmat[-ncol(x),]
}
}
if(tri[1]=="lower"){
rmat[upper.tri(rmat, diag = FALSE)] <- ""
if (cutempty[1]) {
rmat <- rmat[,-ncol(x)]
}
}
# if vars2 supplied - cut to cross-correl
if (!is.null(vars2)) {
rmat <- rmat[1:length(vars),(length(vars)+1):length(varsall)]
}
#else{
#  if(result[1]=="html") print(xtable(Rnew), type="html")
#  else print(xtable(Rnew), type="latex")
#}
return(rmat)
}
correltable(data=diamonds)
# combine vars to start
varsall <- c(vars,vars2)
varNamesall <- c(varNames,varNames2)
# if vars is missing,
if (is.null(varsall)) {
varsall <- names(data)
varNamesall<-varsall
}
# Check varNames
if (length(varNames) != length(vars)) {
stop('length of varNames does not match length of vars',call. = F)
}
if (length(varNames2) != length(vars2)) {
stop('length of varNames2 does not match length of vars2',call. = F)
}
#select data
x <- data %>% dplyr::select(all_of(varsall))
x
x <- x %>% select_if(negate(is.numeric))
x
#select data
x <- data %>% dplyr::select(all_of(varsall))
#check for non-numeric and remove with warning...
x <- x %>% select_if(is.numeric)
x
diamonds
x
varsall
varNames
varNamesall
#check for non-numeric and remove with warning...
tmp <- x %>% select_if(is.numeric)
tmp
#check for non-numeric and remove with warning...
tmp <- colnames(x %>% select_if(is.numeric))
tmp
varsall
varsall[colnames(x %>% select_if(is.numeric))]
grep(colnames(x %>% select_if(is.numeric)), varsall)
grepl(colnames(x %>% select_if(is.numeric)), varsall)
match(colnames(x %>% select_if(is.numeric)),varsall)
varsNamesall[match(colnames(x %>% select_if(is.numeric)),varsall)]
varNamesall[match(colnames(x %>% select_if(is.numeric)),varsall)]
#check for non-numeric and remove with warning...
varNamesall <- varNamesall[match(colnames(x %>% select_if(is.numeric)),varsall)]
varsall <- varsall[match(colnames(x %>% select_if(is.numeric)),varsall)]
x <- x %>% select_if(is.numeric)
correltable <-function(data, vars=NULL, varNames = vars,
vars2=NULL, varNames2=vars2,
method=c("pearson", "spearman"), use=c("pairwise","complete"),roundN=2,
tri=c("upper", "lower","all"), cutempty= c(FALSE,TRUE), colnum= c(FALSE,TRUE)){
# combine vars to start
varsall <- c(vars,vars2)
varNamesall <- c(varNames,varNames2)
# if vars is missing,
if (is.null(varsall)) {
varsall <- names(data)
varNamesall<-varsall
}
# Check varNames
if (length(varNames) != length(vars)) {
stop('length of varNames does not match length of vars',call. = F)
}
if (length(varNames2) != length(vars2)) {
stop('length of varNames2 does not match length of vars2',call. = F)
}
#select data
x <- data %>% dplyr::select(all_of(varsall))
#check for non-numeric and remove with warning...
varNamesall <- varNamesall[match(colnames(x %>% select_if(is.numeric)),varsall)]
varsall <- varsall[match(colnames(x %>% select_if(is.numeric)),varsall)]
x <- x %>% select_if(is.numeric)
#correlate
r <- stats::cor(x, use = use[1], method = method[1])
#get n
n <- t(!is.na(x)) %*% (!is.na(x))
# calc t-stat
t <- (r * sqrt(n - 2))/sqrt(1 - r^2)
# calc p-value
p <- -2 * expm1(pt(abs(t), (n - 2), log.p = TRUE))
p[p > 1] <- 1
# round, format, and add stars
rmat <- matrix(paste(sub(x = format(round(r,roundN),roundN),pattern = "0.",replacement = "."),
ifelse(p<.001,"***",ifelse(p<.01,"**",ifelse(p<.05,"*",""))),sep=""),
nrow = ncol(x),ncol = ncol(x))
# remove diagonal
diag(rmat) <- "-"
# if vars2 supplied - override other...
if (!is.null(vars2)) {
colnum <- FALSE
cutempty <- FALSE
tri <- "all"
}
#rename
if (colnum[1]) {
rownames(rmat) <- paste(1:length(varsall), varNamesall, sep = ". ")
colnames(rmat) <- 1:length(varsall)
} else {
rownames(rmat) <- varNamesall
colnames(rmat) <- varNamesall
}
## pick upper/lower triangle of correlation matrix to keep
if(tri[1]=="upper"){
rmat[lower.tri(rmat, diag = FALSE)] <- ""
if (cutempty[1] & !colnum[1]) {
rmat <- rmat[-ncol(x),]
}
}
if(tri[1]=="lower"){
rmat[upper.tri(rmat, diag = FALSE)] <- ""
if (cutempty[1]) {
rmat <- rmat[,-ncol(x)]
}
}
# if vars2 supplied - cut to cross-correl
if (!is.null(vars2)) {
rmat <- rmat[1:length(vars),(length(vars)+1):length(varsall)]
}
#else{
#  if(result[1]=="html") print(xtable(Rnew), type="html")
#  else print(xtable(Rnew), type="latex")
#}
return(rmat)
}
correltable(data=diamonds)
correltable(data=diamonds, vars= c("carat","depth","price"),vars= c("Carat","Depth","Price ($)"),tri="lower", colnum=T)
correltable(data=diamonds, vars= c("carat","depth","price"),varNames= c("Carat","Depth","Price ($)"),tri="lower", colnum=T)
correltable(data=diamonds, vars= c("carat","depth","price"),varNames= c("Carat","Depth","Price ($)"),vars2= c("x","y","z")
)
library(tidyverse)
theme_set(theme_bw(base_size = 12,base_family = "Arial")); theme_update(panel.grid.minor = element_line(linetype = "dashed",size=.5),axis.title.x = element_text(face = "bold"),axis.title.y = element_text(face = "bold"))
library(openxlsx)
library(parallel)
library(table1)
library(tableone)
library(psych)
#library(knitr)
#library(kableExtra)
library(sjPlot)
#library(gplots) # for venn
library(lme4)
library(lmerTest)
library(performance)
library(gghalves)
library(emmeans)
load("/Users/david/Dropbox (NYSPI)/Randy/Papers/BANDA/banda_data200.RData")
banda_thickness_winsorZ$PATIENT_CURRENT <- as.factor(banda_thickness_winsorZ$PATIENT_CURRENT)
#long_tracula$Timepoint <- factor(long_tracula$Timepoint,levels(long_tracula$Timepoint)[c(2,1)])
banda_thickness_winsorZ$wasi_fullscale_i[is.na(banda_thickness_winsorZ$wasi_fullscale_i)] <- mean(banda_thickness_winsorZ$wasi_fullscale_i,na.rm=T)
bandafmri$wasi_fullscale_i[is.na(bandafmri$wasi_fullscale_i)] <- mean(banda_thickness_winsorZ$wasi_fullscale_i,na.rm=T)
grouptests <- function(datafile, groupvar, outcome, ...) {
x <- datafile[[groupvar]]
y <- datafile[[outcome]]
s <- data.frame(var=outcome,stat=NA,p=NA,sig=NA,test=NA)
if (is.numeric(y)) {
p <- t.test(y ~ x)$p.value
stat <- t.test(y ~ x)$statistic
test <- "ttest"
} else {
p <- chisq.test(y , x )$p.value
stat <- chisq.test(y , x )$statistic
test <- "chi"
}
s$stat <- round(stat,2)
s$p <- sub(x = format.pval(p, digits=2, eps=0.001),pattern = "0.",replacement = ".")
s$sig <- ifelse(p<.001,"***",ifelse(p<.01,"**",ifelse(p<.05,"*","ns")))
s$test <- test
s
}
# Step 4 - Summarize clinical and demographic data
#STRAIN
#StressCT 	 Core		 Total Count of Stressors	 Core: Total Count of Stressors
#StressTH 	 Core		 Total Severity of Stressors	 Core: Total Severity of Stressors
#EvntCT 	 Core		 Count of Acute Life Events	 Core: Count of Acute Life Events
#DiffCT 	 Core		 Count of Chronic Difficulties	 Core: Count of Chronic Difficulties
#EvntTH 	 Core		 Severity of Acute Life Events	 Core: Severity of Acute Life Events
#DiffTH 	 Core		 Severity of Chronic Difficulties	 Core: Severity of Chronic Difficulties
#PNCT 	 Time-Limited	 Prenatal 	 Total Count	 Time-Limited: Prenatal - Total Count
# CIAllCT 	 Characteristic	 Interpersonal Loss 	 Total Count	 Characteristic: Interpersonal Loss - Total Count
# CHAllCT 	 Characteristic	 Humiliation 	 Total Count	 Characteristic: Humiliation - Total Count
paste("Exclusions")
table(banda200$Exclusion)
banda200[banda200$Exclusion!="good",c("banda_id","Exclusion")]
table(banda_thickness_winsorZ$Exclude_adhd_current)
table(banda_thickness_winsorZ$adhd_med)
table(banda_thickness_winsorZ$other_med)
table(banda_thickness_winsorZ$PATIENT_CURRENT)
paste("Descriptives for all 193 good participants")
CreateTableOne(data=banda_thickness_winsorZ, vars=c("age","sex","Tanner4","Handedness","White","wasi_fullscale_i","demo_income_i","mfq_total","rcads_gen_anx","rcads_social","stressct","evntct","diffct","ciallct","challct","T1_SumMotion","IPT_RMSavg"),  factorVars=c("sex","White","Handedness","Tanner4"), strata = c("PATIENT_CURRENT"))
tmp <- do.call("rbind",lapply(c("age","sex","Tanner4","Handedness","White","wasi_fullscale_i","demo_income_i","mfq_total","rcads_gen_anx","rcads_social","stressct","evntct","diffct","ciallct","challct","T1_SumMotion","IPT_RMSavg"), function(x) grouptests(banda_thickness_winsorZ,"PATIENT_CURRENT",x)))
CreateTableOne(data=bandafmri, vars=c("age","sex","Tanner4","Handedness","White","wasi_fullscale_i","demo_income_i","mfq_total","rcads_gen_anx","rcads_social","stressct","evntct","diffct","ciallct","challct","T1_SumMotion","IPT_RMSavg"),  factorVars=c("sex","White","Handedness","Tanner4"), strata = c("PATIENT_CURRENT"))
tmp <- do.call("rbind",lapply(c("age","sex","Tanner4","Handedness","White","wasi_fullscale_i","demo_income_i","mfq_total","rcads_gen_anx","rcads_social","stressct","evntct","diffct","ciallct","challct","T1_SumMotion","IPT_RMSavg"), function(x) grouptests(bandafmri,"PATIENT_CURRENT",x)))
#summary(bandafmri[,c("age","sex","Tanner4","Handedness","White","wasi_fullscale_i","demo_income_i","mfq_total","rcads_gen_anx","rcads_social","stressct","evntct","diffct","ciallct","challct","T1_SumMotion","IPT_RMSavg")])
summary(banda_thickness_winsorZ[,c("age","sex","Tanner4","Handedness","White","wasi_fullscale_i","demo_income_i","mfq_total","rcads_gen_anx","rcads_social","stressct","evntct","diffct","ciallct","challct","T1_SumMotion","IPT_RMSavg")])
table(banda_thickness_winsorZ$PATIENT_CURRENT,banda_thickness_winsorZ$HasFMRI)
# ALPHA
itemwise_1 <- read.csv2('/Users/david/Dropbox (NYSPI)/Randy/BANDA200/Data/Self-Report - Adolescent/REDCap/Item-Level Data/Raw/ado_item_raw_initial_banda200.csv',na.strings = " ",sep = ",")
mfq <- names(itemwise_1)[grep("mfq",names(itemwise_1))]
itemwise_1[,mfq] <- as.data.frame(lapply(itemwise_1[,mfq], function(x) as.numeric(as.character(x))))
MFQ_i <- merge(banda_thickness_winsorZ,itemwise_1,by = "banda_id",all.x = T)
psych::alpha(MFQ_i[,mfq])
itemwise_6 <- read.csv2('/Users/david/Dropbox (NYSPI)/Randy/BANDA200/Data/Self-Report - Adolescent/REDCap/Item-Level Data/Raw/ado_item_raw_6m_banda200_100719.csv',na.strings = " ",sep = ",")
mfq <- names(itemwise_6)[grep("mfq",names(itemwise_6))]
itemwise_6[,mfq] <- as.data.frame(lapply(itemwise_6[,mfq], function(x) as.numeric(as.character(x))))
MFQ_6 <- merge(banda_thickness_winsorZ,itemwise_6,by = "banda_id",all.x = T)
psych::alpha(MFQ_6[,mfq])
rcads <- names(itemwise_1)[grep("rcads",names(itemwise_1))]
itemwise_1[,rcads] <- as.data.frame(lapply(itemwise_1[,rcads], function(x) as.numeric(as.character(x))))
RCADS_1 <- merge(banda_thickness_winsorZ,itemwise_1,by = "banda_id",all.x = T)
psych::alpha(drop_na(RCADS_1[,c("rcads1_i","rcads13_i","rcads22_i","rcads27_i","rcads35_i","rcads37_i")])) #GAD
psych::alpha(drop_na(RCADS_1[,c("rcads4_i", "rcads7_i", "rcads8_i","rcads12_i","rcads20_i","rcads30_i","rcads32_i","rcads38_i","rcads43_i")])) #SAD
rcads <- names(itemwise_6)[grep("rcads",names(itemwise_6))]
itemwise_6[,rcads] <- as.data.frame(lapply(itemwise_6[,rcads], function(x) as.numeric(as.character(x))))
RCADS_6 <- merge(banda_thickness_winsorZ,itemwise_6,by = "banda_id",all.x = T)
psych::alpha(drop_na(RCADS_6[,c("rcads1_1","rcads13_1","rcads22_1","rcads27_1","rcads35_1","rcads37_1")])) #GAD
psych::alpha(drop_na(RCADS_6[,c("rcads4_1","rcads7_1","rcads8_1","rcads12_1","rcads20_1","rcads30_1","rcads32_1","rcads38_1","rcads43_1")])) #SAD
# tables 1-2
CreateTableOne(data=banda_thickness_winsorZ, vars=c("DEP_CURRENT","ANX_CURRENT","GROUP4_CURRENT","Exclude_adhd_current","Exclude_eating_current","Exclude_ptsd_current","Exclude_disruptive_current","Exclude_substance_current","Exclude_ocd_current","Exclude_other_dx_current","antidepressant","adhd_med","other_med","any_meds"),  factorVars=c("DEP_CURRENT","ANX_CURRENT","Exclude_adhd_current","Exclude_eating_current","Exclude_ptsd_current","Exclude_disruptive_current","Exclude_ocd_current","Exclude_substance_current","Exclude_other_dx_current","antidepressant","adhd_med","other_med","any_meds"), strata = c("PATIENT_CURRENT"))
CreateTableOne(data=banda_thickness_winsorZ, vars=c("mdd_dsm5_current_i","dysthymia_dsm5_current_i","depressive_nos_current_i","gen_anxiety_current_i","social_phobia_current_i","sep_anxiety_current_i","specific_phobia_current_i","panic_current_i","agoraphobia_dsm5_current_i"),  factorVars=c("mdd_dsm5_current_i","dysthymia_dsm5_current_i","depressive_nos_current_i","gen_anxiety_current_i","social_phobia_current_i","sep_anxiety_current_i","specific_phobia_current_i","panic_current_i","agoraphobia_dsm5_current_i"), strata = c("PATIENT_CURRENT"))
CreateTableOne(data=banda_thickness_winsorZ, vars=c("cssrs_ideation_q1_to_q5_current_i","cssrs_ideation_q2_to_q5_current_i","cssrs_suicidal_bx_current_i","cssrs_attempt_bx_current_i"),  factorVars=c("cssrs_ideation_q1_to_q5_current_i","cssrs_ideation_q2_to_q5_current_i","cssrs_suicidal_bx_current_i","cssrs_attempt_bx_current_i"), strata = c("PATIENT_CURRENT"))
CreateTableOne(data=banda_thickness_winsorZ, vars=names(banda_thickness_winsorZ)[grep("dsm5",names(banda_thickness_winsorZ))],  factorVars=names(banda_thickness_winsorZ)[grep("dsm5",names(banda_thickness_winsorZ))], strata = c("PATIENT_CURRENT"))
#CreateTableOne(data=banda, vars=names(banda)[grep("lifetime",names(banda))],  factorVars=names(banda)[grep("lifetime",names(banda))])
m<-lm(data=bandafmri, scale(RWD_avgAccumbens) ~  scale(age) + sex +  scale(wasi_fullscale_i)+ Tanner4 + Handedness+  scale(IPT_RMSavg)  +Exclude_adhd_current+ any_meds +PATIENT_CURRENT)
m2<-lm(data=bandafmri, scale(RvL_avgAccumbens) ~  scale(age) + sex +  scale(wasi_fullscale_i)+ Tanner4 + Handedness+  scale(IPT_RMSavg)  +Exclude_adhd_current+ any_meds +PATIENT_CURRENT)
m3<-lm(data=bandafmri, scale(LOSS_avgAccumbens) ~  scale(age) + sex +  scale(wasi_fullscale_i)+ Tanner4 + Handedness+  scale(IPT_RMSavg)  +Exclude_adhd_current+ any_meds +PATIENT_CURRENT)
m3<-lm(data=bandafmri, scale(LOSS_avgAccumbens) ~  scale(age) + sex +  scale(wasi_fullscale_i)+ Tanner4 + Handedness+  scale(IPT_RMSavg)  +Exclude_adhd_current+ any_meds +PATIENT_CURRENT)
tab_model(m,m2,show.stat = T,show.ci = F,pred.labels = c("(Intercept)","Age","Sex","IQ","Puberty","Handedness","Motion",'ADHD',"Medication","GROUP"),dv.labels = c("Reward-Baseline","Reward-Punishment"))
correltable(data=diamonds)
print(correltable(data=diamonds),quotes=F)
print(correltable(data=diamonds), quote = TRUE, noSpaces = TRUE)
rmat
print(rmat, quote = TRUE, noSpaces = TRUE)
str(rmat)
class(rmat)
noquote(rmat)
format(rmat)
noquote(rmat)
htmlTable::htmlTable(rmat)
